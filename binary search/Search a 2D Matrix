You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.


class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        rows, cols = len(matrix), len(matrix[0])
        topRow, botRow = 0, rows-1
        while topRow <= botRow:
            midrow = (topRow + botRow) // 2
            if target > matrix[midrow][-1]:
                topRow = midrow + 1
            elif target < matrix[midrow][0]:
                botRow = midrow - 1
            else:
                break
        if not (topRow <= botRow):
            return False
        
        midrow = (topRow + botRow) // 2
        l, r = 0, cols - 1
        while l <= r:
            mid = (l + r)//2
            if target > matrix[midrow][mid]:
                l = mid + 1
            elif target < matrix[midrow][mid]:
                r = mid - 1
            else:
                return True
        return False

1. The code searches for a target value in a sorted 2D matrix. It first performs a binary search on rows to determine the potential row of the target.
Then, it performs another binary search on that row to find the target value. If found, it returns True; otherwise, False. 

        
