Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) 
so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:
-It is the empty string, contains only lowercase characters, or
-It can be written as AB (A concatenated with B), where A and B are valid strings, or
-It can be written as (A), where A is a valid string.


class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = []
        for index, char in enumerate(s):
            if char == '(':
                stack.append(index)
            elif char == ')':
                if not stack or s[stack[-1]] != '(':
                    stack.append(index)
                else:
                    stack.pop()
        result = []
        for char_index in range(len(s)):
            if char_index not in stack:
                result.append(s[char_index])
        return result


1. Initialize an empty stack and iterate over the input string, s, character by character.
2. If a ( is encountered, push its index to the stack.
3. If a ) is encountered, check if the stack is empty or if the character at the top of the stack is not a (
   If either of these conditions are true, push the index of the current character to the stack.
4. If the top of the stack is a (, pop it.
5. Create an empty result list and iterate over the input string, s, again.
6. For each character index, if it is not in the stack, append the corresponding character to the result list.
7. Convert the result list to a string and return it.
