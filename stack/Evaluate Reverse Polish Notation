You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.
Note that:
The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for c in tokens:
            if c == "+":
                stack.append(stack.pop() + stack.pop())
            elif c == "-":
                a, b = stack.pop(), stack.pop()
                stack.append(b - a)
            elif c == "*":
                stack.append(stack.pop() * stack.pop())
            elif c == "/":
                a, b = stack.pop(), stack.pop()
                stack.append(int(b / a))
            else:
                stack.append(int(c))
        return stack[0]

1. Initialize an empty stack to store operands.
2. Loop through each token in the input list.
3. If the token is an operator ('+', '-', '*', '/'), pop the top two values from the stack (representing the operands) and apply the operator to them.
   Then, push the result back to the stack.
4. For example, if the token is '+', pop two values (let's say a=3 and b=4) from the stack and push their sum (7) back onto the stack.
5. If the token is a numeric value, convert it to an integer (as all the values in the stack are integers) and push it onto the stack.
6. After processing all tokens, the stack will contain the final result of the RPN expression, and there should be only one value in the stack, which is the result.
7. Return the single value in the stack as the final output.
