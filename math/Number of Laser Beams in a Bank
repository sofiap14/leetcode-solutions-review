Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, 
which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.
There is one laser beam between any two security devices if both conditions are met:
-The two devices are located on two different rows: r1 and r2, where r1 < r2.
-For each row i where r1 < i < r2, there are no security devices in the ith row.
-Laser beams are independent, i.e., one beam does not interfere nor join with another.
Return the total number of laser beams in the bank.

class Solution:
    def numberOfBeams(self, bank: List[str]) -> int:
        prev_row, cur_row = 0, 0
        res = 0
        for row in bank:
            cur_row = row.count("1")
            if cur_row == 0:
                continue
            res += prev_row * cur_row
            prev_row = cur_row
        return res

1. Initialize prev_row and cur_row as 0, and res as 0.
2. Iterate through each row in bank.
3. Count the number of 1s in the current row.
4. If cur_row is 0, continue to the next iteration.
5. Otherwise, add prev_row * cur_row to res, and update prev_row to cur_row.
6. After iterating through all rows, return res.
