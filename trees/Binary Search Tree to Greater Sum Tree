Given the root of a Binary Search Tree (BST), convert it to a Greater Tree, 
such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

class Solution:
    seen = 0
    def bstToGst(self, root: TreeNode) -> TreeNode:
        if root.right: 
            self.bstToGst(root.right)
        
        self.seen += root.val
        root.val = self.seen
        
        if root.left: 
            self.bstToGst(root.left)
        
        return root

    # def bstToGst(self, root: TreeNode) -> TreeNode:
    #     def dfs(node, val=0):
    #         if node.right:
    #             val = dfs(node.right, val)
    #         val += node.val
    #         node.val = val
    #         if node.left:
    #             val = dfs(node.left, val)
    #         return val
    #     dfs(root)
    #     return root

1. if it exists, traverse the right subtree
2. calculate the accumulated sum and update the current node value to it
3. if it exists, traverse the left subtree
4. return root
