Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].
Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        i = 0
        j = n
        res = []
        while i < n and j <= len(nums):
            res.append(nums[i])
            res.append(nums[-j])
            i += 1
            j -= 1
        return res

1. Start two pointers i and j at the beginning of the first half (i=0) and the second half (j=n) of the array.
2. Initialize an empty list "res" to store the shuffled elements.
3. While i is within the first half and j is within or equal to the length of the array (second half):
   a. Append the element at index i from the first half to "res".
   b. Append the element at index -j (counting from the end) from the second half to "res".
   c. Increment i and decrement j to move to the next pair of elements.
4. Continue this process until all elements from both halves are added to "res".
5. Return the "res" list, which now contains the shuffled elements in the desired order.
