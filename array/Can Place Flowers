You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, 
return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        if n == 0:
            return True
        for i in range(len(flowerbed)):
            if flowerbed[i] == 0 and (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):
                flowerbed[i] = 1
                n -= 1
                if n == 0:
                    return True
        return False
        
1. First, the function checks if n is 0. If yes, it means no new flowers need to be planted, so it returns True.
2. Then, it loops over each position i in the flowerbed.
3. For each position, it checks three conditions to decide if a flower can be planted at i:
  a. The current position i is empty (flowerbed[i] == 0).
  b. The previous position is either at the beginning of the array or is also empty (i == 0 or flowerbed[i-1] == 0).
  c. The next position is either at the end of the array or is empty (i == len(flowerbed)-1 or flowerbed[i+1] == 0).
4. If all conditions are met, it plants a flower at i by setting flowerbed[i] to 1 and decreases n by 1.
5. If at any point n becomes 0, it means all new flowers have been successfully planted, so it returns True.
6. If the loop finishes without n becoming 0, it means not all flowers could be planted, so it returns False.
