Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        rows = collections.defaultdict(set)
        cols = collections.defaultdict(set)
        squares = collections.defaultdict(set)
        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                if (board[r][c] in rows[r] or
                    board[r][c] in cols[c] or
                    board[r][c] in squares[(r//3, c//3)]):
                    return False
                cols[c].add(board[r][c])
                rows[r].add(board[r][c])
                squares[(r//3, c//3)].add(board[r][c])
        return True

1. Create three defaultdicts named rows, cols, and squares. 
   These dictionaries will be used to keep track of the numbers encountered in each row, column, and 3x3 subgrid (square) of the Sudoku board.

2. Iterate through each cell of the 9x9 Sudoku board using two nested loops (for rows and columns):
    a. If the cell contains a ".", it's empty, so continue to the next cell.
    b. If the cell contains a number:
        i. Check if the number already exists IN the current row r or current column c, or in the 3x3 square determined by (r//3, c//3).
          If it does, return False, indicating an invalid Sudoku.
        ii. Otherwise, add the number to the corresponding sets in rows, cols, and squares to keep track of its presence in the respective row, column, and square

3. After iterating through the entire board, if no duplicate numbers were found in any row, column, or square, return True, indicating a valid Sudoku.
