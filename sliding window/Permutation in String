Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        l1 = [0] * 26
        l2 = [0] * 26
        for ch in s1:
            l1[ord(ch) - ord('a')] += 1
        for i in range(len(s2)):
            l2[ord(s2[i]) - ord('a')] += 1
            if i >= len(s1):
                l2[ord(s2[i-len(s1)]) - ord('a')] -= 1
            if l1 == l2:
                return True
        return False

1. Initialize l1, l2 lists with 0s for each character
2. Populate 1s for the characters in s1
3. Iterate through s2, and populate characters in l2.
4. If i >= len(s1) then it implies then the window needs to be shrunk from the left starting end
    s2[i-len(s1)] ==> s2[2-2] ==> s2[0] ==> 'e' ==>l2[ord('e') - ord('a')] -= 1 (removed the first character)
  If l1 == l2 at this point, then both lists have the characters permutation and we return true
