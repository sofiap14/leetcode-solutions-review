Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        l = 0
        r = 1
        while r < len(nums):
            if nums[l] == 0 and nums[r] != 0:
                nums[l], nums[r] = nums[r], nums[l]
                l += 1
                r += 1
            elif nums[l] == 0 and nums[r] == 0:
                r += 1
            else:

                l += 1
                r += 1
        return nums


1. The solution uses two pointers, l and r, to iterate through the array.
2. If the element at l is 0 and the element at r is non-zero, swap them and move both pointers to the next positions.
3. If both elements at l and r are 0, move only the r pointer to the next position -  it is unnecessary to swap two 0 elements.
4. If neither element is 0, move both pointers to the next positions.
5. Repeat this process until the r pointer reaches the end of the array.
6. The solution modifies the array in-place, moving all the 0s to the end while maintaining the order of the non-zero elements.
7. The modified array is returned.
