You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        cur = dummy
        
        carry = 0
        while l1 or l2 or carry:
            v1 = l1.val if l1 else 0
            v2 = l2.val if l2 else 0
            val = v1 + v2 + carry

            # new digit
            carry = val // 10
            val = val % 10
            cur.next = ListNode(val)

            #update pointers
            cur = cur.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummy.next

1. Initialize our result list as dummy, cur pointer points to the dummy node
2. We need to perform addition, as the lists l1, l2 are given in reverse and we need to also return addition in reverse, it works out, no need to reverse.
    We store the value of the list1, list2 in v1, v2 and add them. We keep track of carry that might come up in this addition. 
3. Create a new node with the value after adding the digits at v1, v2, storing carry and with only the single digit that remains. 
4. Update the pointers, the curr pointer shifts to the curr.next (where we created the new node), then we update l1, l2 to next if they exist or to None
5. This loop runs as long as there are l1, l2 nodes or as long as there is a carry
