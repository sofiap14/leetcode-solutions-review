You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.


class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        res = ListNode()
        merged_list = res
        while list1 and list2:
            if list1.val < list2.val:
                res.next = list1
                list1 = list1.next
            else:
                res.next = list2
                list2 = list2.next
            res = res.next
        if list1:
            res.next = list1
        if list2:
            res.next = list2
        return merged_list.next

1. Initialize res (dummy) list node. merged_list is the head of the created linked list
2. While both linked lists list1, list2 have nodes in them, 
    if list1.val is lesser than the list2.val, then we point res.next to list1's node
    else: the res.next points to list2's node
3. If either list1 or list2 end, then the res.next points to the linked list which still has nodes in it.
4. Return merged_list.next 
  
